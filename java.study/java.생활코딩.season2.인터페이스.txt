1. 문법과 개념
- abstract와 final과 함께 대표적인 규제가 바로 interface이다.
- 어떤 객체가 있고, 그 객체가 특정한 인터페이스를 사용한다면, 그 객체는 반드시 인터페이스의 메소드들을 구현해야 한다.
interface I{
    public void z();
}
 
class A implements I{
    public void z(){}
}
 → interface i는 마치 추상 클래스처럼 정의가 되어 있다.
 → 메소드의 내용이 없기 떄문에, 따로 구현을 해주어야 한다.
 → interface를 구현한 클래스의 형식은 마치 상속과도 같은데, 클래스 A가 인터페이스 I를 구현(implements)한 것이다.

2. 사용이유
- 큰 프로젝트를 할때 보통 사용된다.
- 계산기를 만들기 위해서 계산로직과 사용로직을 구현한다고 할떄, 계산 로직의 더미를 만들어 임의의 값을 부여한다.
- 계산로직에서 결국 값이 출력되기 때문에 이를 이용하여 사용로직을 구현해서 어떤 식으로 계산된 값을 표현할지, 입력방법은 어떻게 할지 등을 만들어 낸다.
- 만약 계산로직의 더미를 만들지 않는다면, 사용로직은 계산로직이 완성될 때 까지 아무런 작업도 할 수 없었을 것이다.
- 결론적으로 시간을 크게 단축할 수 있는 것이다.
- 만약 사용로직에서 입력할 숫자(매개변수)가 3개인데, 계산로직에서 받는 인자는 두개라면, 오류가 발생한다.
- 이런 착오가 있을 수 있기 떄문에 협업프로젝트에서 소통이 매우 중요하다.
- 이러한 소통을 구두나 서면으로 하는 것이 아니라 코드레벨에서 지정한다면 어떨까?

3. 규칙
- interface의 접근 제어자는 무적권 public이어야 한다. 
  → public이 아닌 interface는 정의할 수 없다.
- 하나의 클래스가 여러개의 인터페이스를 구현할 수 있다.
- 상속은 자식클래스가 하나의 클래스만 상속받을 수 있다는 점에서 인터페이스와 차이가 있다.
- abstract VS interface
 → abstract는 일반 클래스이기 때문에, 상속을 통한 오버라이딩으로 구체적인 로직을 구현한다.
 → abstract는 추상 클래스 안에 추상메소드와 일반 메소드, 필드를 가질 수 있다.
 → interface는 필드를 가질 수 없고, 무조건 내용이 없는 메소드만 가질 수 있다.
