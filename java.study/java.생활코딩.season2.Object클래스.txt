1. 소개
- object 클래스 : 모든 클래스의 시조가 되는 클래스
ex) 아래의 두 클래스는 같다
package org.java_study.javatutorials.progenitor;

class o {}

class o extends Object {} 
- 자바에서 기본적으로 제공해주는 클래스들, 사용자가 만드는 클래스들을 묶어주는 공통분모. 그것이 Object이다.
- Object 클래스가 가지고 있는 메소드에서 클래스가 가져야 할 필수적 기능을 구현하고 있다.

2. toString 메소드
- toString : 문자화 시킨다. 어떠한 클래스나 객체를 문자화 시키면 어떻게 되는지 정의하는 클래스
- Calculator c1 = new Calculator;라는 인스턴스를 만들었을 때, c1을 println하면 
  → org.java_study.javatutorials.progenitor.Calculator@506e1b77 라는 결과가 나온다
- 위 결과는 패키지 경로 + 클래스@인스턴스 식별자 이다.
- println에 c1.toString을 넣어도 같은 결과가 출력된다.
  → println이라는 메소드에 인자를 집어넣으면, toString 메소드가 호출되도록 시스템 상으로 약속이 되어있다.
- toString이라는 메소드를 정의하지 않았는데도 호출이 가능한 것은 표기를 하지 않았어도, 시스템적으로 Object 클래스를 상속하기 때문이다.

3. equals 메소드
- equals : 객체와 객체가 같은지 확인하는 API
- 같은 클래스에서 만든 같은 데이터 타입의 객체 두개( s1, s2)를 비교했을 때 기본적으로 둘은 다르다고 결과가 나오지만, 둘의 결과가 같다고 코딩할 수도 있다.
- equals의 기본적인 시그니처는 아래와 같다
ex) public boolean equals(Object obj){
	return true;
}
- 자식클래스의 데이터 타입을 가진 변수는 부모클래스의 데이터 타입을 가질 수 있다.
ex) Object를 Student가 상속했을 때
 → Object obj = s2 
 → s2는 Student 클래스로 만든 인스턴스 변수이지만, 저렇게 대입이 가능하다.
- 부모클래스의 데이터 타입을 가진 변수에게 자식 클래스의 데이터 타입을 가지게할 수 없다.
ex) Student s = obj
- 그래서 아래처럼 형변환을 명시해야만 형변환이 가능하다.
ex) Student _obj = (student)obj;
- 기본적으로 equals는 hashCode 메소드를 같이 알아야한다.
- 원시 데이터 형(int, float, double, char, String 등등)을 비교할 때는 ==을 쓰고, 그 외의 객체와 객체, 클래스와 클래스 등을 비교할 때에는 무조건 equals를 써야한다.

4. finalize 메소드
- finalize : 객체가 소멸될 때 호출되기로 약속된 메소드, 객체가 소멸될 때 실행되어야 되는 작업이 있다면, 이 클래스를 오버라이딩(재정의)해서 로직을 짜면 된다.
- 여러가지 이유로 finalize 메소드는 사용이 지양되고 있다.
- garbage collection : 자바 등에서 사용되는 불필요한 데이터 사용을 애플리케이션 자체에서 감지해서 자동으로 데이터를 삭제하는 기능
- 인스턴스를 사용하는 것은 메모리(RAM)을 사용하는 것이다.
- 메모리는 가장 빠르고, 비싸고, 적고, 소중한 자원이기 때문에, 왠만한 프로그램은 램을 적게 쓸 수록 좋다.
- 자바는 인스턴스를 생성하여 변수에 담았는데, 그것이 사용되지 않는 경우 자동으로 쓰지 않은 데이터를 삭제한다.

5. clone 메소드
- clone : 어떤 객체가 있을 때 그 객체와 똑같은 객체를 복제해주는 기능
- clone을 하려면 인스턴스를 생성할 때 활용한 클래스의 복제가능 여부를 JVM에게 알려주기 위해서 Cloneable 인터페이스를 구현해야한다.
ex) class Student implements Cloneable {}
- Cloneable 인터페이스의 내용을 확인해보면 아무것도 없다.
- clone 메소드는 접근제어자가 protected이다.
- protected는 다른 패키지에서 접근이 불가하기 때문에, 사용자 패키지에서 clone()메소드에 접근하는 것은 불가능하다.
- clone 메소드는 CloneNotSupportedException을 무조건 발생시키므로 예외처리를 해야한다.
- 모든 클래스는 Object클래스를 상속하기 때문에, toString, clone등은 모든 클래스에서 사용가능하다