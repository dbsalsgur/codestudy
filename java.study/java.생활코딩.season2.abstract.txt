1. 문법
- abstract 메소드나 클래스를 사용하기 위해서는 반드시 상속을 해서 사용해야하는 규제가 있다.
- 추상클래스는 class 앞에 abstract를 붙인다
ex) abstract class A
- 추상 메소드는 데이터 타입 앞에 abstract를 붙인다.
ex) public abstract int b();
  → 추상 메소드는 로직이 되는 코드, 즉 내용이 없다. 겉으로 보이는 형식만 지니고 있다.
- 추상 클래스가 상속을 해야만 사용할 수 있는 것처럼, 추상 메소드는 overriding 해야만 사용할 수 있다.
- 사용하고 싶은 코드의 내용을 사용자에게 넘기는 것이 abstract이다.
- 클래스 안의 메소드 중 추상 메소드가 하나라도 있다면, 클래스도 추상클래스로 정의해야 한다.
- 추상메소드로 정의한 메소드는 내용을 가질 수 없다
  → 로직을 넣어도 오류만 발생한다.

2. 사용이유
- 추상클래스는 부모클래스에 메소드의 시그니처만 정의해놓고, 실제 동작방법은 상속을 통해, 자식클래스에 오버라이딩 한 메소드에게 맡기고 있다. 이는 작은 프로젝트에서는 거의 없다.
- 프로젝트에서 큰 틀은 제공하되, 사용하고 싶은 로직을 사용자가 직접 넣는 것이다.
- 로직의 업데이트와 유지보수가 용이하다.

3. 디자인 패턴
- 프로그래밍을 할 떄 로직의 전개, 구성 등이 특정한 패턴이 있다는 발견에서 시작한 개념