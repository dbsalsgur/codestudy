1. 패키지의 개념
- 여러 사람들이 클래스를 만들 때, 이름의 중복이 있을 수 있다. 이때, 이름의 중복 문제 해결할 수 있는 것이 패키지이다.
- 폴더와 같은 디렉토리의 개념이 이와 유사하다.

2. 패키지 사용
- 패키지를 통해 같은 이름의 클래스, 메소드, 같은 동작방식의 코드를 개별로 넣을 수도 있다.
- 만약 서로 다른 패키지에서 클래스를 로드하고 싶다면 import를 통해 아래와 같은 양식으로 기입한다.
ex) import org.java_study.javatutorials.packages.example1.*;
 → * 은 해당 패키지 내의 모든 클래스를 로드하겠다는 의미
ex) import org.java_study.javatutorials.packages.example1.A;
 → A는 클래스 이름으로, 특정 클래스만 가져오고 싶다면 .클래스_이름을 뒤에 기입하면 된다.

3. 손컴파일
- 개발도구 없이 컴파일 할 수 있다.
- 전에 배운대로, javac 컴파일할_파일의_경로/컴파일할_파일.java를 하면 컴파일이 된다. 
- 하지만 클래스파일은 자바 파일과 동일한 곳에 생성되고, 이클립스처럼 bin 디렉토리에 생성되지 않는다.
- 위와 동일한 명령에 -d bin(컴파일한 파일을 저장하고 싶은 상위 디렉토리)를 붙여서 입력하면, 컴파일한 파일이 같은 경로를 찾아가서 저장된다.
- 이때 조건은 지정한 상위 디렉토리 외, 하위 디렉토리는 동일한 이름과 경로이어야 한다.

4. 로드된 패키지들 간의 중복
- 만약 각각 다른 패키지를 로드했는데, 그 안의 각각의 클래스가 동일한 이름을 사용했다 가정하자
- 그 클래스로 인스턴스를 생성하면, 어떤 클래스를 로드해야할지 알 수없기 때문에 오류가 발생한다.
- 이때, 로드하고 싶은 클래스의 패키지 경로를 직접 입력한다면 문제가 해결된다.
ex) org.java_study.javatutorials.packages.example1.B b = new org.java_study.javatutorials.packages.example1.B
