1. 객체지향 프로그래밍
- 객체지향 프로그래밍이란 객체를 만드는 것
- 객체(object) : 연관된 변수, 메소드를 그룹핑한 것, 상태와 행위의 집합
- 객체는 추상적인 것이 아닌 아주 논리적인 문법으로 표현된 결과물
- 추상화(abstract) : 해결해야할 문제를 소프트웨어적으로 단순화하여 만드는 것
- 은닉화, 캡슐화 : 사용자가 그것의 동작방법을 모르더라도 사용결과를 알고 쓸 수 있는 것
  → 객체의 중요한 컨셉

2. 클래스와 인스턴스, 그리고 객체
- 리팩토링(refactoring) : 시간이 지나서 코드를 좋은 방향으로 개선하는 것
- 코드가 복잡해질수록 같은 이름의 다른 메소드를 만들거나 변수를 만들 수 있다. 
- Calculator c1 = new Calculator();에서 c1이라는 변수에 Calculator라는 객체를 담았는데, c1의 데이터형식은 Calculator라는 데이터 타입을 가지고 있어야한다.
- 인스턴스 : 변수에 담을 구체적인 객체
- 클래스 : 인스턴스(객체)의 내용을 설명하기 위한 것, 설계도
- 클래스에서는 먼저 사용할 변수를 선언한다(field).
- this : 클래스, 또는 인스턴스 자신을 뜻함
public void setOprands(int left, int right){
        this.left = left;
        this.right = right;
    }
 → this.left는 이 클래스의 변수 left이며, 우항의 left는 setOprands 메소드에 들어가는 int left이다.
- 객체
