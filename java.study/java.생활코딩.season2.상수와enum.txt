1. 상수에 대한 복습
- 상수는 변하지 않는 값이다.
ex) int x = 1;
 → 좌항이 변수, 우항이 상수이다.
ex) 1 = 2; 
 → 둘다 상수이지만, 있을 수 없는 구문이다.

2. enum의 배경
- 상수를 지정할 때 보통 다음과 같이 지정한다. 
ex) public static final int APPLE = 1;
- 만약 복수의 그룹을 생성한다고 했을때, 상수의 이름이 겹친다면 이를 구분해줄 필요가 있을 것이다.
ex) public static final int FRUIT_APPLE = 1;
public static final int COMPANY_APPLE = 1;
- 이를 interface를 통해서 그룹으로 묶어줄 수도 있다.
ex) interface Fruit {
	int APPLE = 1, PEACH = 2, BANANA = 3;
}
interface Company {
	int GOOGLE = 1, APPLE = 2, ORACLE = 3;
}
→ 이 경우 만약 Fruit의 APPLE과 Company의 APPLE이 같은 상수 값을 가졌다면, 둘을 비교했을 때 같다고 출력이 되는 불상사가 발생할 수 있다.
→ 이 오류는 꽤 치명적으로, 아래와 같은 상황이 발생할 수 있다.
ex) int type = COMPANY_GOOGLE;
	switch(type){
		case FRUIT_APPLE:
		System.out.println(57+" kcal");
	}
결과는 57 kcal
- 상수가 같다는 이유로 의도와 다른 결과가 출력될 수 있는 것이다.
- 이를 컴파일러 선에서 구분할 수 있는 방법은 class의 인스턴스화 이다.
 → 다른 데이터타입을 비교하려고 하면 컴파일부터 안된다.
- switch문은 원시적 데이터타입 밖에 인자로 넣을 수 없다.

3. enum의 문법
- enum : 열거형(enumerated type)이라고 부른다. 연관되어 있는 상수들의 집합이다.
- enum의 형식은 아래와 같다
ex) enum Fruit {
	APPLE, PEACH, BANANA;
}
→ enum은 클래스이다.
- enum은 상수들을 인스턴스화 하는 것과 같은 효과를 지닌다.
ex) public static final Fruit APPLE = new Fruit();


4. enum과 생성자
- enum은 클래스이기 때문에 생성자가 있다.
- enum에 리터럴을 세팅하는 것은 인스턴스를 생성하는 것과 같다.
- 따라서 enum에 리터럴을 세팅하면, 생성자를 리터럴 한개당 한번씩 호출하기 때문에, enum의 생성자에 로직을 세팅하면, enum에 담긴 리터럴의 개수만큼 로직이 실행된다.
- 생성자에 this를 세팅하면, 생성자를 대표하는 정보를 자바가 알려준다.
- enum은 상수를 늘어놓는다는 의미 뿐만 아니라, 어떠한 값을 지정해줄 수 있다는 것이다.
- enum과 클래스의 인스턴스화를 통해 상수를 선언하는 것의 가장 큰 차이점은 enum은 배열처럼 원하는 곳의 데이터를 꺼내쓸 수 있다는 점이다.
- 이때 value()메소드를 사용한다.
- value메소드는 열거형의 모든 상수를 하나하나 꺼내서 리턴한다.