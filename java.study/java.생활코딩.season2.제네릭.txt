1. 제네릭의 사용
- 제네릭 : 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법.
ex)class Person <T> {
	public T info;
}
Person<String> p1 = new Person<String>();
Person<StringBulider> p2 = new Person<StringBuilder>();
→ 꺾새를 클래스명 뒤에 지정해서, 클래스를 사용하게 될 때(인스턴스화 할 때) 클래스 명 뒤에 꺾새로 해당 클래스의 변수의 데이터 타입을 지정한다.
→ p1과 같이 String을 지정했을 때, String은 클래스 명 옆에 있는 <T>에 저장되고, info의 데이터 타입이 String이 된다.

2. 제네릭의 사용이유
- 같은 동작을 하는 클래스를 통합하기 위해 합친 후, 서로 다른 의미를 각각 가질 수 있게 사용할 수 있다.
- 그런데, 서로 다른 클래스를 통합했을 때, 서로 다른 개념의 상위 개념을 데이터 타입으로 지정했을 때(예를 들면, 모두의 조상인 Object), 해당 클래스와 목적이 맞지 않은 로직을 넣어도, 컴파일 오류가 없이 실행 가능하다는 점이다(runtimeException은 발생한다.).
- 이는 데이터 타입의 존재 이유가 상당히 퇴색되는 일이다.
  → 타입이 안전하지 않은(type safety) 상황
- 이를 방지하기 위해, 데이터 타입을 자유롭게 지정 가능한 generic이 만들어 졌다.

3. 제네릭의 특징
- 제네릭에는 기본형 데이터타입은 올 수 없고, 참조형 데이터 타입만 올 수 있다.
  → 예를 들어 제네릭을 생성하고, int형을 지정하면 오류가 발생한다.
- 위 같은 상황에서 기본 데이터 타입을 객체 클래스인 것 처럼 만들 수 있는 시스템, 래퍼 클래스(wrapper class)가 자바에 존재한다.
- 래퍼 클래스 : 기본 데이터 타입을 객체로 포장하는 클래스.
- intValue() : 래퍼 클래스로 담은 인스턴스 변수 의 값을, 기본 데이터로 바꾸어 반환하는 메소드
 ex) Integer id = new Integer(1); / this.id = id 에서 intValue를 거치면, int형의 1로 반환

4. 제네릭의 생략
- 제네릭에 넣을 인스턴스를 따로 생성할 때, 그 인스턴스 변수를 매개변수로 하는 제네릭의 클래스의 인스턴스를 생성하면, 그 인스턴스에 각각 참조 데이터 타입을 지정해 주지 않아도, 자바 시스템 상 제네릭에 각각 앞에 선언한 참조형 데이터 타입이 들어갔다는 것을 인지한다.
ex)    EmployeeInfo2 e = new EmployeeInfo2(1);
    	Integer i = new Integer(10);
       Person2 p1 = new Person2(e, i);
	→ 위 처럼만 작성해도 Person2 <T, S>에 각각 EmployeeInfo2, Integer가 지정됨을 자바는 알고 있다.
- 메소드에도 제네릭을 적용할 수 있다.

5. 제네릭의 제한
- 제네릭에는 그 특성 상 어떠한 데이터 타입도 올 수 있다
- 이는 조금 비효율적이다. 이를 해결하기위해 extends를 사용한다.
- 한 클래스의 자식인 클래스의 데이터 타입을 제네릭을 적용한 클래스의 데이터 타입으로 사용할 수 있다. 이 때, 형식은 아래와 같다.
ex) abstract class Info
    class EmployeeInfo extends Info
    class Person<T extends Info> 
	→ Person<EmployeeInfo> p1 = new Person<EmployeeInfo>(new EmployeeInfo(1));
- 위의 경우, Info의 자식클래스가 아닌 클래스를 데이터 타입으로 적용하려고 하면, 컴파일 에러가 난다.
- 이는 class, abstract class, interface 모두에게 적용된다.
- 만약 extends없이 제네릭만 적용해서, 원래 가지고 오려고 의도했던 Info에 있는 메소드를 호출하면 컴파일 에러가 발생한다.
ex) 
class Person<T extends Info>{
	public T info;
	Person(T info) {
		this.info = info;
		info.getLevel();
	}
}
→ Ok.
class Person<T>{
	public T info;
	Person(T info) {
		this.info = info;
		info.getLevel();
	}
}
→ Error, 컴파일 불가
- <T>는 <T extends Object>와 같다.
 → Object 클래스에 있는 메소드만 가져올 수 있다.