1. 제네릭의 사용
- 제네릭 : 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법.
ex)class Person <T> {
	public T info;
}
Person<String> p1 = new Person<String>();
Person<StringBulider> p2 = new Person<StringBuilder>();
→ 꺾새를 클래스명 뒤에 지정해서, 클래스를 사용하게 될 때(인스턴스화 할 때) 클래스 명 뒤에 꺾새로 해당 클래스의 변수의 데이터 타입을 지정한다.
→ p1과 같이 String을 지정했을 때, String은 클래스 명 옆에 있는 <T>에 저장되고, info의 데이터 타입이 String이 된다.

2. 제네릭의 사용이유
- 같은 동작을 하는 클래스를 통합하기 위해 합친 후, 서로 다른 의미를 각각 가질 수 있게 사용할 수 있다.
- 그런데, 서로 다른 클래스를 통합했을 때, 서로 다른 개념의 상위 개념을 데이터 타입으로 지정했을 때(예를 들면, 모두의 조상인 Object), 해당 클래스와 목적이 맞지 않은 로직을 넣어도, 컴파일 오류가 없이 실행 가능하다는 점이다(runtimeException은 발생한다.).
- 이는 데이터 타입의 존재 이유가 상당히 퇴색되는 일이다.
  → 타입이 안전하지 않은(type safety) 상황
- 이를 방지하기 위해, 데이터 타입을 자유롭게 지정 가능한 generic이 만들어 졌다.
-  