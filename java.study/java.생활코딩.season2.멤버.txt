1. 멤버란?
- 객체는 변수, 메소드라는 구성원(member)를 갖는다.
- 클래스도 변수, 메소드라는 멤버를 가지고, 인스턴스도 변수, 메소드라는 멤버를 가진다.
- 인스턴스마다 변수가 다르고, 당연히 다른 결과값을 리턴한다.

2. 클래스 변수
- 인스턴스 변수 : 인스턴스마다 다른 상태를 갖게하는 변수
- 클래스 변수 : 모든 인스턴스가 공통으로 공유하는 변수
- 아래와 같이 static이라는 키워드를 붙인 변수를 선언함으로서 클래스 변수 선언이 가능하다
ex) static double PI = 3.14;
- 아래처럼 각각의 인스턴스는 물론, 클래스를 통해서도 클래스 변수를 호출할 수 있다.
 Calculator c1 = new Calculator();
        System.out.println(c1.PI);
 
 Calculator c2 = new Calculator();
        System.out.println(c2.PI);
 
        System.out.println(Calculator.PI);
 → 3개 모두 3.14를 리턴한다
- 클래스 변수는 객체 생성 후, 아래와 같이 값을 수정할 수도 있다. 두번째 줄이 실행된 시점부터 base의 값이 달라져 같은 메소드를 호출해도 리턴하는 값이 달라질 수 있다.
ex) static int base = 0;
    Calculator2.base = 10;
- 클래스에서 변수 선언을 할때, static의 유무로 클래스의 멤버인지 인스턴스의 멤버인지 구분할 수 있다.

3. 클래스 메소드
- 아래와 같이 static이라는 키워드를 첨가하여 클래스 메소드를 생성할 수 있다.
ex) public static void sum(int left, int right){ ~ } 
- 클래스 변수와 같이 static이라는 키워드의 유무에 따라 해당 메소드가 클래스 멤버인지, 인스턴스 멤버인지 구분 가능하다.
- 클래스 메소드는 인스턴스 선언 없이도 아래와 같은 양식으로 클래스를 통해 직접 메소드를 호출할 수 있다.
ex) Calculator3.sum(10,20);

4. 타입별 비교
- 인스턴스 메소드는 클래스 멤버에 접근할 수 있다.
- 클래스 메소드는 인스턴스 맴버에 접근할 수 없다.
- 클래스는 인스턴스를 만들기 전 먼저 만들어지는 설계도이기 때문에, 상대적으로 나중에 만들어지는 인스턴스에 접근하는것에 논리적인 오류가 있다.
- 인스턴스 변수 = non-static field
- 클래스 변수 = static field
