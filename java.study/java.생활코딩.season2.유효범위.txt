1. 유효범위란?
- 변수와 메소드를 사용할 수 있는 것은 이름이 있기 때문이다.
- 여러 이유로 이름끼리 충돌(같은 이름이지만 다른의미로 쓰는 변수나 메소드를 생성하는 등)이 일어날 수 있다. 이를 해결하기 위한 것이 유효범위(scope)라고 한다.
- 아래와 같은 메소드가 있다고 하자.
ex) static void a() {
    int i = 0;
}
- for문을 통해 해당 메소드를 불러와서 i값을 1씩 증가시킨다고 했을때, 메소드 a()를 불러올때마다 int i = 0이라는 것에 부딪히게 된다. 
- 만약 int i = 0이라는 것이 계속해서 정의된다면 for문을 써도 while문처럼 0을 계속 출력하게 될것이다. 이런 오류를 방지하기 위해 메소드에서 선언된 변수는 메소드 안에서만 유효하고, 외부에 있는 코드에 영향을 줄 수 없다. 이것이 유효범위, scope이다.

2. 전역변수와 지역변수
- 전역변수(global variables) : 클래스에서 선언된 클래스 변수
- 지역변수(local variables) : 메소드에서 선언된 변수
- 전역변수는 클래스 안의 모든 곳에서 영향을 끼치는 변수이다.
- 지역변수는 메소드 안, 조건문 안 등등 선언된 곳의 중괄호 안에서만 영향을 끼치는 변수이다.
- 변수를 할당하는 것(i = 0)과 변수를 선언하는 것(int i = 0)은 변수의 유효범위를 지정하고 안하고의 차이가 있는 굉장히 다른 행동이다.

3. 다양한 유효범위
- 문자열도 동일하게 아래와 같이 메소드 안에서만 유효범위를 가져, 해당 메소드를 호출하고 출력하려고 하면 오류가 발생한다.
ex) static void a(){
    String title = "coding everybody";
}
public static void main(String[] args){
    a();
    System.out.println(title);
}
- 선언된 클래스 변수는 전역변수로 다른 곳에도 영향을 미칠 수 있지만, 클래스 메소드 안에 있는 선언된 변수는 그럴 수 없다.
- 같은 클래스 안에서도 변수는 선언된 곳의 중괄호 안에서만 유효하고, 중괄호 바깥에서는 유효하지 않다.
- 실행되는 코드가 있는 곳에서는 그 코드 안에서 선언된 지역변수나, 해당 코드의 클래스에서 선언된 전역변수만이 영향을 줄 수 있다.

4. this
- 지역변수와 전역변수를 각각 선언할 때의 장점은 해당 메소드에서만 다른 값을 주고 싶을 때 활용 가능하다는 점이다.0
- this는 자기 자신이라는 뜻으로 인스턴스에서 메소드를 호출한다면 메소드 자신을 의미한다.