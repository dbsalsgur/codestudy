1. 자유와 규제
- 접근제어자의 의의 : 객체 안의 멤버들(메소드, 변수)에게 접근할 수 있는 권한의 차등을 지정하는 기능
- 자바의 데이터타입이 있는 것도 하나의 자유와 규제이다.
  → 개발자는 데이터타입을 일일이 정해야하는 것이 규제일 수 있지만, 사용자의 입장에선 리턴할 타입이 반드시 정수, 문자 등등 일 것이라는 확신을 줄 수 있다.


2. 문법
- public : 누구나 해당 메소드를 사용할 수 있다.
- private : 해당 메소드는 외부의 클래스에서 호출하거나 사용할 수 없다.
- 다만 private 메소드를 호출하려면 아래와 같은 방법으로 할 수 있다.
ex)private String z(){
    return "public void z()";
    }
    public String x(){
        return z();
 → 실행 클래스에서 x()메소드를 호출하면, z()가 호출되는데, x()메소드와 z()메소드는 같은 클래스 내에 있기 때문에 호출 가능하다.

3. 사용이유
- 은행을 예로 들어보자
  → 은행창구는 은행을 이용하는 모든 고객들이 이용할 수 있어야 한다. > public
  → 금고는 일부의 은행 관계자들만 이용할 수 있어야 한다. > private
- 변수를 public으로 했을 때, 사용자가 변수를 마음대로 설정하여, 프로그램이 개발자가 의도한 방향과 다른 방향으로 동작할 수 있다.
  → private을 통해 예상치 못한 오류를 줄일 수 있다.
- 사용자는 public으로 된 것만 접근할 수 있기 때문에, private로 된 것은 신경쓰지 않는다.
  → 사용자가 프로그램이 동작하기 위한 로직을 파악할 때, 모든 것이 아니라 최소한의 것만 파악해도 된다.

4. 세밀한 제어
	                         public	protected            default	private
같은 패키지, 같은 클래스	허용	허용	            허용	허용
같은 패키지, 상속 관계	허용	허용	            허용	불용
같은 패키지, 상속 관계 아님	허용	허용	            허용	불용
다른 패키지, 상속 관계	허용	허용	            불용	불용
다른 패키지, 상속 관계 아님	허용	불용	            불용	불용