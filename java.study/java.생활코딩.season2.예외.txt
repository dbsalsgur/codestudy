1. 예외란 무엇인가
- 예외 : 프로그램을 만든 프로그래머가 예기치 못한 오류가 발생 했을 때 이를 처리하는 방법
- try, catch는 예외처리를 위한 핵심적인 문법
- try : 코드 상 사용자의 입력에 따라 오류가 발생할 수 도 있는 부분에 try를 사용하여 묶는다.
 → try안의 코드 실행 중 오류가 발생하면, try안의 코드의 실행은 해당 시점에서 중지가 된다.
- catch : try에서 코드의 오류가 발생하여 실행이 중단되면, catch로 넘어가서 catch안의 코드를 실행하게된다.
- catch는 구문이며, catch의 매개변수는 오류에 대한 정보가 담긴 객체를 담는다. 
- catch의 매개변수의 데이터 타입은 Exception이다.
- JVM안에 Exception이라는 클래스가 있다. 그 안에 getMessage라는 메소드도 있다.
- 에러의 내용을 담은 Exception 클래스의 인스턴스 e를 통해 getMessage 메소드를 호출하면, 에러의 내용을 출력한다.
- 정리
try {
	예외의 발생이 예상되는 로직
} catch (예외클래스 인스턴스){
	예외가 발생했을 떄 실행되는 로직
}

2. 뒷 수습
- \n은 줄바꿈이다.
- getMessage 메소드는 예외 원인을 간단히 출력한다
ex) / by zero
- toString 메소드는 조금 더 자세히 출력한다
ex) java.lang.ArithmeticException / by zero
- printStackTrace 메소드는 예외처리를 하지 않았을 때 JVM 시스템에서 출력하는 오류 메세지를 출력한다.
ex) java.lang.ArithmeticException: / by zero
	at java_tutorials/org.java_study.javatutorials.exception.Calculator.divide(CalculatorDemo.java:15)
	at java_tutorials/org.java_study.javatutorials.exception.CalculatorDemo.main(CalculatorDemo.java:31)
  → 어느 프로젝트의 어느 패키지의 어느 클래스가 어느 행에서 오류가 났는지
- try, catch 구문이 종료되면, catch 바깥에 있는 코드는 순서대로 실행된다.

3. 다양한 예외들
- java.lang.ArrayIndexBoundsException : 배열 바깥에 있는 값을 호출하면 발생하는 예외
ex) Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 3
	at java_tutorials/org.java_study.javatutorials.exception.A.z(ExceptionDemo1.java:11)
	at java_tutorials/org.java_study.javatutorials.exception.ExceptionDemo1.main(ExceptionDemo1.java:18)
- 형태에 따라 두가지 이상의 예외가 발생할 수도 있다.
- try, catch 구문을 통해 getMessage를 한 경우 어떠한 입력 값에서도 예외 원인이 출력된다.
- 만약 다른 예외를 각각 다르게 처리하고 싶을 경우 
  → catch문을 여럿 만들면 된다.
  → if else if와 비슷한 맥락
- Exception이 다양하게 있는데, 색출하고 싶은 예외를 지정해서 발생 시 동작을 지정할 수 있다.
ex) ArrayIndexOutOfBoundsException, ArithmeticException 등
- 예상되는 예외 이외의 예외가 발생할 경우를 생각해서 할 수 있는 조치
  → 맨 아래 catch에 Exception을 넣는 것
  → 만약 Exception을 catch의 제일 상위에 넣고 아래에 특정 Exception을 위치시킨다면 오류가 발생한다
  → Exception에서 이미 예외가 걸러지기 때문에 아래 Exception들은 동작할 일이 없기 때문.

4. finally
- finally는 예외와 관계 없이 실행되는 로직이며, 형식은 아래와 같다
ex) try { 
   syso 
} catch(Exception e){
   syso
} finally {
   syso
}
- finally는 예외가 의심되는 로직에 대해 예외처리를 할 때, 꼭 실행되도록 하는 로직을 넣기 위한 수단이다
- 예를 들어, 데이터베이스 서버를 기반으로 자바 애플리케이션이 연결되면서 실행된다고 할때, 자바 애플리케이션에서 오류가 발생했을 때 실행할 로직을 try로 묶을 수 있다. 하지만 이때, 데이터베이스 서버와 자바 애플리케이션 간의 연결을 끊는 코드를 넣지 않는다면, 자바 애플리케이션에서 오류가 발생한 후 데이터베이스 서버와의 연결을 계속하여 다른 오류가 발생하지 않는 자바 애플리케이션이 구동되지 않는 경우가 발생할 수 있다(데이터베이스 서버의 포트의 개수가 한정되어 있음).

5. 예외의 강제
- class이름을 f1을 누르면 java 도움말 윈도우가 켜진다.
- class 설명 중 throws는 예외가 발생할 수도 있는 것에 대한 설명이다
ex) FileReader 클래스의 경우 
 Throws :
  FileNotFoundException - ~~~~~~
  → 위와 같은 예외를 발생할 수도 있는 클래스라는 뜻이다.
- java 도움말에 Throws가 있는 클래스는 예외처리를 무조건 해야 한다(예외처리의 강제).
- 즉 예외 중에는 무조건 예외처리를 해야하는 경우가 있고, 무조건 예외처리를 하지 않아도 되는 경우가 있다.

6. 예외 사슬
- FileReader는 특성 상 예외를 무조건 개발자에게 '던진다(throw)'
- 그럼 개발자는 예외를 try catch 구문을 통해 '잡는다(catch)'
- 이러한 예외를 다른사람에게 던질 수 있다.