1. 예외란 무엇인가
- 예외 : 프로그램을 만든 프로그래머가 예기치 못한 오류가 발생 했을 때 이를 처리하는 방법
- try, catch는 예외처리를 위한 핵심적인 문법
- try : 코드 상 사용자의 입력에 따라 오류가 발생할 수 도 있는 부분에 try를 사용하여 묶는다.
 → try안의 코드 실행 중 오류가 발생하면, try안의 코드의 실행은 해당 시점에서 중지가 된다.
- catch : try에서 코드의 오류가 발생하여 실행이 중단되면, catch로 넘어가서 catch안의 코드를 실행하게된다.
- catch는 구문이며, catch의 매개변수는 오류에 대한 정보가 담긴 객체를 담는다. 
- catch의 매개변수의 데이터 타입은 Exception이다.
- JVM안에 Exception이라는 클래스가 있다. 그 안에 getMessage라는 메소드도 있다.
- 에러의 내용을 담은 Exception 클래스의 인스턴스 e를 통해 getMessage 메소드를 호출하면, 에러의 내용을 출력한다.
- 정리
try {
	예외의 발생이 예상되는 로직
} catch (예외클래스 인스턴스){
	예외가 발생했을 떄 실행되는 로직
}

2. 뒷 수습
- \n은 줄바꿈이다.
- getMessage 메소드는 예외 원인을 간단히 출력한다
ex) / by zero
- toString 메소드는 조금 더 자세히 출력한다
ex) java.lang.ArithmeticException / by zero
- printStackTrace 메소드는 예외처리를 하지 않았을 때 JVM 시스템에서 출력하는 오류 메세지를 출력한다.
ex) java.lang.ArithmeticException: / by zero
	at java_tutorials/org.java_study.javatutorials.exception.Calculator.divide(CalculatorDemo.java:15)
	at java_tutorials/org.java_study.javatutorials.exception.CalculatorDemo.main(CalculatorDemo.java:31)
  → 어느 프로젝트의 어느 패키지의 어느 클래스가 어느 행에서 오류가 났는지
- try, catch 구문이 종료되면, catch 바깥에 있는 코드는 순서대로 실행된다.

3. 다양한 예외들

