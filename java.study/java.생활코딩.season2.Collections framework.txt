1. ArrayList의 사용법
- 배열은 선언할 때, 그 크기를 지정해야 하고, 만약 그 범위를 벗어나면 오류가 발생한다. 이러한 단점을 보완하기 위한 것이 바로 ArrayList이다.
- ArrayList는 java.util.ArrayList;로 java.util에 포함된 패키지를 import해야 한다.
- ArrayList의 선언 방법은 아래와 같다.
ex) ArrayList al = new ArrayList();
- ArrayList에 리터럴을 담는 방법은 아래와 같다.
ex) al.add("one");
    al.add("two");
- add() 메소드는 어떠한 형태의 데이터 타입도 수용 가능하다.
  →매개변수로 무조건 Object가 와야한다.
- ArrayList의 길이를 구하려면 .length가 아닌 .size()라는 메소드를 사용해야 한다.
ex) for(int i=0; i<al.size(); i++)
- ArrayList에 저장된 값을 반환하려면 .get(i)를 사용해야 한다.
ex) System.out.println(al.get(i));
- ArrayList에 저장된 값은 기본적으로 Object 데이터 타입으로 저장되어 있다.
 →String과 같은 타입으로 호출하거나 변수에 담고 싶다면, 형변환을 해주어야 한다.
- 위와 같이 변수 하나하나에 값을 담을 때마다 형변환을 하는 것은 비효율적이다. 이로 인해 제네릭을 ArrayList에 적용할 수 있게 되었다.
ex) ArrayList<String> al = new ArrayList<String>();\

2. 전체적인 구성
- Collections framework : Collection과 map으로 나뉘며, Collection아래에는 set, List, Queue가 있다.
- set, List, Queue에도 하위 항목이 있다.
- Collections framework는 컨테이너라고도 한다.
- List : 자신이 배열과 비슷한 것이 필요한데, 저장공간이 자동으로 늘어나는 것이 필요하면 사용하는 컨테이너
- set : 관리해야 하는 데이터가 중복적으로 저장되지 않는 컨테이너가 필요할 때 사용하는 컨테이너
- List는 데이터가 동일하든 말든 넣는대로 저장되는 반면, set은 저장 시 기존에 저장한 데이터인지를 확인하여 있던 것이면 저장하지 않고, 새로운 데이터만을 저장해나간다.

3. Set이란?
- 수학의 집합과 같다.
 → 집합의 원소는 같은 값을 2개 이상 담는 것을 허용하지 않는다. 고유한 값 한가지씩만 담을 수 있다.
- containsAll() : 한 HashSet에 있는 데이터가 다른 HashSet에 모두 포함되어 있는지를 확인하는 메소드
ex) A.containsAll(B) →A라는 HashSet에 B라는 HashSet의 구성요소가 모두 들어 있는가
 → 결과는 boolean타입으로 반환된다.
 → 부분집합과 같은 개념
- addAll() : 한 HashSet에 다른 HashSet의 값을 모두 넣는다.
ex) A.addAll(B) → A라는 HashSet에 B의 구성요소를 모두 넣는다.
 → 중복되지 않는 고유의 값이 모두 들어간다.
 → 합집합과 같은 개념
- retainAll() : 한 HashSet에 있는 요소와 다른 HashSet에 있는 요소 중 겹치는 요소를 한 HashSet에 저장
ex) A.retainAll(B) : A에 있는 요소와 B에 있는 요소 중 겹치는 요소만 A에 저장(기존에 있는 것은 없어짐)
 → 교집합과 같은 개념
- removeAll() : 한 HashSet에 있는 요소와 다른 HashSet에 있는 요소 중 겹치는 요소만 한 HashSet의 요소에서 제외시킴
ex) A.removeAll(B) : A에 있는 요소와 B에 있는 요소 중 겹치는 요소를 A에서 제외시킴
 → 차집합과 같은 개념
- List는 저장한 순서대로 저장되나, Set은 순서가 보장되지 않는다. 

4. Collection Interface
- Collection은 인터페이스이고, Set, Array는 Collection을 상속받는 인터페이스이다.
- List를 구현한 클래스들이 ArrayList, LinkedList 등이다
- Set을 구현한 클래스 들이 HashSet, TreeSet, LinkedHashSet 등이다.
- 실제로는 추상클래스 등 복잡한 관계가 있으나, 간단하게는 위와 같다.

5. Iterator
- 반복자. 컨테이너의 값을 하나하나 꺼내서, 하나하나 처리할 수 있다.
- Iterator는 위에서 본, List, Set처럼 인터페이스이다.
- Iterator가 가지고 있는 메소드는 hasNext(), next(), remove()의 세가지 이다.
- Set을 담은 변수로 Iterator 형을 가진 객체를 생성할 수 있다.
ex) Iterator hi = A.iterator();
- hasNext() : boolean타입을 리턴타입으로 가지며, Iterator 변수, 즉, Iterator 컨테이너에 값이 존재하면 true를 리턴한다.
- next() : Iterator에 있는 값 한가지를 반환한다. 반환에 성공하면, Iterator에 저장되어 있던 해당 값을 삭제한다.
  →while문을 통해 하나씩 꺼낸다면, 다른 조건문 없이 모든 값을 꺼낼 수 있다.
- iterator() 메소드를 통해 hi 변수에 담은 값은 참조값이고, 실제 데이터는 아니기 때문에 next()로 삭제되어도 문제가 없다.
- iterator는 Collection 인터페이스를 구현한 모든 클래스에서 사용 가능하다.

6. Map의 기본 사용법
- Map은 key와 value의 쌍으로 값을 저장하는 컬렉션이다.
- Map은 key라는 저장공간과, value라는 저장공간을 가지게 된다.
- Map에 저장 시 a.put("one", 1)과 같은 형식으로 저장하게 되는데, 이때 key에 저장된 값은 "one"이며, value에 저장된 값은 1이다.
- Map에 저장된 값을 호출할 때 key값인 "one"을 입력하면 value값인 1이 반환되는 형식이다.
- key값은 중복될 수 없다.
- 만약 "one"이라는 key값과 1이라는 value값이 Map상에 존재할 때, ("one", 200)을 입력한다면, 기존의 one이라는 key는 유지가 되면서, 1이라는 값이 200으로 덮어쓰기가 된다.
- value값은 중복이 허용된다.
- 각각 다른 key가 둘 다 2라는 value를 가지고 있어도 오류는 발생하지 않는다.
- 통상 맵을 쓴다고 하면 HashMap을 사용하게 된다.
- MapName.put(key, value) : Map에서만 사용되는 API이며, key값과 value값을 저장하기 위한 메소드이다.
- MapName.get(key) : key값을 통해 value를 호출할 수 있는 메소드
- 인터페이스 안에 구현된 인터페이스의 데이터 타입은 Map.Entry와 같이 표현할 수 있다.
※참고
java map api의 method instance 부분을 보면
Set<Map.Entry<K,V>> entrySet()
Returns a Set view of the mappings contained in this map.
라고 나옵니다.  이말은 entrySet()의 메소드를 호출하면, return값이 Set<Map.Entry<K, V>>이 된다는 말입니다.
여기서 Map.Entry<K,V>는 Map안에 있는 nested class, 중첩클래스입니다. 
Map자체를 Set의 제네릭 타입으로 두는게 아니라 Map의 Entry의 형태를 Set의 제네릭 타입으로 둔다는 이야기입니다.
Set의 요소가 Interger나 String이 아니라 Map내부의 클래스인 Entry클래스인 것입니다. 여기서 Entry의 모양은 Key-value값을 갖는 하나의 객체입니다. 


이 바탕으로 질문에 답을 드리자면, 굳이 Collection Interface를 구현하지 않아도, return값이 Set이기 때문에 사용이 가능합니다.
여기서 return값은 내부 요소일 필요는 없습니다. 예를 들어서 int형의 64의 return값이 char이면 "A"가 됩니다. 데이터 타입은 자료를 해석하는 방식이기 때문에, 반드시 내부요소일 필요는 없습니다. Map의 Entry객체를 Set의 요소로 해석하는 것이 [ 리턴 값 : Set<Map.Entry<K,V>> 메소드 : entrySet() 형식인 것입니다 ]
Map의 Key-value쌍 하나를 Entry객체로 만들고, 그것을 하나의 요소처럼 만드는 동작을 하는 것인 entrySet()입니다.
그래서 그림을 잘 보시면,  Key-value를 하나의 객체로 만들어서 Set의 내부 변수로 쓰게 되는 것입니다.
그러면 Set의 원소가 1, 2, 3, 4, 5처럼 쓰이듯 같이 Map의 Key-value값을 하나의 원소, 객체로 만들어서 1, 2, 3, 4, 5처럼 관리하게 되는 것입니다.


결론적으로, Map의 Key-value값들이 entry()를 통해 하나의 객체로 만들어지고, 그 객체가 하나의 Set집합에 하나의 원소로 들어가게 됩니다. 여기서 Set은 Collection을 상속받았기에 iterator을 쓸 수 있게 되는 것입니다.
