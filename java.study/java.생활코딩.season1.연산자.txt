1. 연산자란? 
- 특정한 작업을 하기 위해서 사용하는 기호

종류
- 대입연산자
- 산술연산자
- 비교연산자
- 논리연산자

2. 산술연산자? 
+ 더하기
- 뺴기
* 곱하기
/ 나누기
% 나머지

package org.opentutorials.javatutorials.operator;
 
public class ArithmeticDemo  {
    public static void main(String[] args) {
        // result 의 값은 3
        int result = 1 + 2;
        System.out.println(result);
    }
}

- 3이 출력된다
- result의 값이 10일때
        // result 의 값은 10
        result = result % 7;
        System.out.println(result);
결과는 3이 출력된다 
- 10에 7을 나누었을 때 그 나머지 값이 출력

+ 연산자는 문자열과 문자열을 더하는데에도 사용

class ConcatDemo {
    public static void main(String[] args){
        String firstString = "This is";
        String secondString = " a concatenated string.";
        String thirdString = firstString+secondString;
        System.out.println(thirdString);
    }
}

- 결과값으로 This is a concatenated string. 가 출력됨


3. 형변환과 연산자
public class DivisionDemo {
      
    public static void main(String[] args) {
        int a = 10;
        int b = 3;
          
        float c = 10.0F;
        float d = 3.0F;
          
        System.out.println(a/b); - 결과값으로 3 출력, 실제 3.333...이지만 출력해야하는 결과값은 실수인 반면, 데이터타입이 정수 'int'이므로 0.333....은 탈락 → 경우에 따라 심각한 문제 발생
        System.out.println(c/d); - 결과값으로 3.333... 출력, 결과값과 데이터타입이 실수이므로 문제x
        System.out.println(a/d); - 정수에 실수를 나누는 경우, java에선 형변환을 해줌 10이라는 정수를  10.0이라는 실수로 자동 컨버팅 해줌 즉 2번째 예제와 같은 데이터타입으로 형변환하여 2, 3번의 예제는 같은 결과 출력
          

4. 단항연산자
- 1+2는 이항 연산자로 +가 좌항 1과 우항 2를 연결하는 역할을 하고 있다
- 단항 연산자는 말그대로 항이 1개인 연산자 
- 종류
+	양수를 표현한다. 실제로는 사용할 필요가 없다.
-	음수를 표현한다.
++	증가(increment) 연산자로 항의 값을 1씩 증가 시킨다.
--	감소(Decrement) 연산자
ex) +3(양수 3). -3(음수 3), 3++(3+1), 3--(3-1)

public class PrePostDemo {
    public static void main(String[] args) {
        int i = 3;
        i++; → i = i+1
        System.out.println(i); // 4 출력
        ++i;
        System.out.println(i); // 5 출력
        System.out.println(++i); // 6 출력
        System.out.println(i++); // 6 출력
        System.out.println(i); // 7 출력
- ++i와 i++의 차이 : ++i는 괄호안에서 이미 계산 됨 → i+1로 출력
                            i++는 코드 수행 후에 i+1으로 계산되어 원래 i값 출력, 이후 i+1됨

5. 연산자의 우선순위
- 연산자별로 우선순위가 있다. 하나하나 다 외울필요는 없고, 프로그램에서 가장 타당한 형태로 결과 출력할 것이다. 
- 연산 시 결합방향도 확인해야한다 ←은 우항에서 좌항 순서로 계산, →은 좌항에서 우항 순서로 계산 

int a = 4-3*6;
위 예문의 경우 *는 3번째, +, -(더하기, 빼기)는 4번째, =는 14번째 순위로 *가 우선으로 연산됨
즉 1번째로 *, 2번째로 -, 3번째로 =가 연산됨
결과 - 14가 출력