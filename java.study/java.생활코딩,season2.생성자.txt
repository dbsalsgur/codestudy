1. 초기화와 생성자
- 아래 예제처럼 값을 지정해주는 메소드가 있어 그것을 먼저 실행해야 다른 메소드가 실행될 수 있는 방식은 사용자의 실수가 발생할 수 있는 클래스다.
ex)  Calculator c1 = new Calculator();
        c1.setOprands(10, 20);
        c1.sum();       
        c1.avg();   
- 이때 아래처럼 생성한 인스턴스에 인자값을 직접 넣어야 하도록 만들면, 인자값을 넣지 않았을때 실행 시 오류가 발생하기 때문에 실수를 할 일이 줄어들 것이다.
 Calculator c1 = new Calculator(10, 20);
        c1.setOprands(10, 20);
        c1.sum();       
        c1.avg();   
- 이를 가능하게 하는 것이 생성자이다.
- 생성자는 클래스와 이름이 동일한 메소드를 만드는데 형식은 아래와 같다
ex) public Calculator(int left, int right) {
    this.left = left;
    this.right = right;
}
- 위의 Calculator가 바로 생성자(constructor)이다.
- 생성자는 생성자가 속한 클래스에서 가장 먼저 실행된다. 즉 객체의 초기화 작업을 한다.
- 생성자는 클래스 내부에 무조건 있어야 한다. 그래서 클래스 내부에 따로 생성자를 만들지 않은 클래스는 실행 시 자동으로 생성자를 만든다.
- 인스턴스를 만들때 new Calculator();의 Calculator();는 메소드를 호출하는 방식과 동일한데, 이는 클래스가 아니라 생성자라는 것을 의미한다.
- 클래스를 이용할때 무조건 실행되어야 하는 로직이 있을 때, 생성자에 그것들을 작성해놓으면, 사용자가 깜박 코드를 안쓰는 등의 실수가 줄어들 것이다.