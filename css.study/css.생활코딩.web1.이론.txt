1. css가 등장하기 전의 상황
- html이 등장한 이후 css는 4년만에 등장했다.
- html이 등장하고 나서 웹페이지를 더 보기좋게, 가독성 좋게 하기위해서 일단 디자인 관련 태그를 발명했다.
- font라는 태그를 통해 글자에 색을 입힐 수 있었다. 하지만 한계에 도달했다.
- font라는 태그는 텍스트에 대해서 어떠한 정보도 담고 있지 않았다. 즉 가치가 현격하게 떨어졌다.
- 그래서 css라는 아예 다른 차원의 언어를 개발했다.

2. css의 등장
- font라는 태그를 썼을 때 컬러 설정을 위해서 색을 입혀야되는 단어마다 태그를 썼어야한다.
- a { 
color:black;
  }
의 형식의 css를 통해 유지 보수가 훨씬 편해졌다.
- css는 html이 정보만 표현하기 위해 html로부터 디자인의 기능을 가져온 언어라고 할 수 있다.
- css가 html보다 웹페이지를 디자인하기에 훨씬 효율적이기 때문에 생겼다.

3. css의 기본문법
- css는 html과 완전히 다른 언어이기 때문에 어디서부터 어디까지가 css인지를 표시해줘야한다.
  → style이라는 태그를 쓴다.
  → style 속성을 쓴다.
위 두가지가 css를 html에 삽입하는 방법이다.
- html과 css의 사용설명서에는 
"style이라는 속성을 썼으면, 그 속성의 값을 웹브라우저는 css의 문법에 따라 해석해서 그 결과를 style이라는 속성이 위치하고 있는 태그에 적용할 것이다." 라고 적혀있다.
- style=""; 이런 식으로 있는 코드는 html의 속성이고, 그는 반드시 css의 효과를 가져온다(큰 따옴표 안에 있는 것이 css).
- style이라는 태그는 반대로 효과만 있으면 누가 효과를 받을 것인지 불분명하기 때문에 선택자(selector)를 지정한다. 
ex)
 a {
 color:black;
 }
여기에서 a {}가 선택자(selector)이다.
중괄호 안에 있는 것은 선택자에게 주는 효과 또는 declaration(선언)이라고 부른다
- declaration은 style속성에서는 해당 태그에게 효과를 줄 것임이 명백하기 때문에 선택자를 사용할 필요가 없다.
- 효과를 여러개 삽입할 경우 세미콜론으로 구분한다. 효과가 끝날때마다 세미콜론을 쓴다.
- css에서 
color:red;
color는 property 혹은 속성
red는 value 혹은 값

4. css 속성을 스스로 알아내기
- css text size property 등 궁금한 효과를 영어로 검색
- font-size : 텍스트의 조정(단위 : px)
- text-align : 텍스트 정렬

5. css 선택자의 기본
- class="saw"
- class는 묶고 싶은 영역들이 있을 때 사용하는 html의 속성
- saw는 클래스이름이다.
- 선택자를 기입할때 클래스명 앞에 .을 붙이면 같은 클래스명의 태그에게 효과를 줄 수 있다.
ex) class="saw"가 있는 경우
  .saw  {
 (declaration)
  }
- class명이 복수일 경우 위에 있는 것이 먼저 인식되고 아래에 있는 것이 나중에 인식된다.
- 태그 안에 복수의 속성 ok, 클래스 복수 ok, 복수의 선택자가 한개 또는 여러개의 태그에 영향 ok
- id 속성은 class속성과 비슷한 형식으로 작성한다.
- 선택자에서 제일 우선순위는 id속성 선택자, 다음이 class속성 선택자, 다음이 태그 선택자이다.
- id값은 html문서에서 하나만 쓸 수 있다. 유일무이한 값이다.

6. 박스모델
- 화면 전체를 쓰는 태그를 block level element
- 자기 자신의 크기만큼의 영역을 쓰는 태그를 inline element
- 기본적으로 제목은 block이고, 링크는 inline인데, css를 통해 바꿀 수 있다. 
display:inline;
display:block;
- 만약 선택자의 모든 내용을 보이고 싶지 않을때
display:none;
- 테두리를 그리고 싶을때 필요한 css
border-width:5px;
border-color:red;
border-style:solid;
이런식으로 작성 가능, 하지만 줄이고 싶다면
border:5px red solid라고 적어도 되며, 저것들의 순서는 상관없다.
- 콘텐츠와 테두리의(영역)의 조절
padding:20px;
- 테두리 바깥의 영역의 조절
margin:20px;
- 콘텐츠의 폭, 높이 조절
width:20px;
height:20px;

7. 박스모델 활용
- 페이지의 개발자 도구(F12)를 통해 각 영역의 표시를 확인하고, 조절가능
- 제목에 선을 긋고 싶을 때
border-bottom: 1px solid gray;
- 영역을 확인해가면서 font-size, padding, margin, border를 적절히 사용해서 디자인 가능