1. 입력과 출력
- 입력값이 없는 애플리케이션은 입력값이 없는 메소드처럼 똑같은 결과를 반복할 뿐이다.
- 입력을 통해 더욱 생동감 있는 애플리케이션을 만들어보자
- IO = input, output

2. String[] args

class InputDemo{
    public static void main(String[] args){
        System.out.println(args.length);
    }
}
- 데이터타입이 문자열인 배열인 변수 args, 매개변수
- void는 출력값이 없다는 뜻
- main은 메소드이름
- args.length는 배열의 길이(크기)
- Java InputDemo라는 애플리케이션에 명령프롬프트를 이용해서 입력값을 줄 수 있다.
- 결과는 입력값의 개수인 숫자가 출력된다.

3. 앱이 시작할떄 입력

class InputForeachDemo{
    public static void main(String[] args){
        for(String e : args){
            System.out.println(e);
        }
    }
}
- one을 입력하면 one이 출력됨
- args라는 변수에 담긴 one이 foreach구문의 args로 넘어가고, foreach구문의 기능으로 args가 어떤데이터를 담고있는지 확인
- e라는 변수에는 args가 담고있는 데이터가 담기게 되고, println으로 출력

4. 앱이 실행중에 입력
- 라이브러리 중에 scanner를 이용하면 쉽게 사용자의 입력을 잡을 수 있다.

import java.util.Scanner;
 
public class ScannerDemo {
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); →사용자가 입력한 값이다
        int i = sc.nextInt(); →sc라는 객체의 nextInt라는 메소드를 호출, 이 코드가 실행되면 프로그램이 일단 멈춤, 콘솔에 입력을 하면 실행되면서 sc에 사용자가 입력한 값이 담기고, 그 값이 i에 담김
        System.out.println(i*1000);
        sc.close();
    }
 
}
- scanner를 이용하려면 애플리케이션에 load해야한다
- import로 애플리케이션에 가져와서 구동한다
- 한번 입력하면 결과가 출력되면서 프로그램이 종료됨

5. 사용자와 계속해서 상호작용을 하면서 실행되는 애플리케이션

import java.util.Scanner;
 
public class Scanner2Demo {
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNextInt()) {
            System.out.println(sc.nextInt()*1000); 
        }
        sc.close();
    }
 
}
- sc.hasNextInt()는 입력값이 생기기 전까지 실행을 유보시키는 역할을 한다
- 만약 입력한 값이 int 형이 아닐 경우는 false를 리턴하고, int형일 경우 true를 리턴한다
- hasNexInt메소드가 호출되면 일단 멈춤
- sc.hasNextInt의 입력값에 엔터를 친다면 중지되어있던 자바를 실행시킴 
- 입력값이 정수(int)라면 true, 아니라면 false를 리턴
- false가 리턴되면 sc.close를 만나 애플리케이션이 종료
- true가 리턴되면 while문으로 돌아가서 다시 입력이 일어날때까지 일시중지

6. 다양한 입출력
(1)파일

import java.util.Scanner;
import java.io.*;
 
public class Scanner3Demo {
 
    public static void main(String[] args) {
        try {
            File file = new File("out.txt");
            Scanner sc = new Scanner(file);
            while(sc.hasNextInt()) {
                System.out.println(sc.nextInt()*1000); 
            }
            sc.close();
        } catch(FileNotFoundException e){
            e.printStackTrace();
        }
         
    }
 
}
- File이라는 객체를 생성해 file이라는 변수에 out.txt라는 파일을 지정
- scanner라는 객체에 변수 file에 지정된 파일을 입력값으로 가져오라고 지시
- try와 catch는 예외처리
- catch안의 내용은 파일을 찾지못했을때의 에러를 출력하라는 의미이다.

(2)GUI (graphic user interface)
- CLI - Command-line Interface와 대척점에 있는 것
- 클릭 등 여러가지 입력을 했을때 화면에 나오는 반응이 다 출력이고, 하나하나가 다 코드로 인해서 출력되는 것임
