1. 논리연산자
- Boolean의 값을 결합해서 코드를 좀 더 간결하게 만들 수 있음

2. and 
- &&로 표기
- 좌항과 우항이 모두 참일때 전체가 참이 되는 논리연산자.

public class AndDemo {
 
    public static void main(String[] args) {
        if (true && true) {
            System.out.println(1);
        } → 이 if문만 좌항과 우항이 참
 
        if (true && false) {
            System.out.println(2);
        }
 
        if (false && true) {
            System.out.println(3);
        }
 
        if (false && false) {
            System.out.println(4);
        }
→ 위 코드를 실행했을 때, 1만 출력, 나머지는 참이 아니기 때문
- 무엇에 쓰이는지 예제를 확인해보자

public class LoginDemo3 {
    public static void main(String[] args) {
        String id = args[0];
        String password = args[1];
        if (id.equals("egoing") && password.equals("111111")) {
            System.out.println("right");
        } else {
            System.out.println("wrong");
        }
    }
}
- 이전에는 if문 안에 if문을 넣어서 만들었던 예제. 논리연산자를 활용해서 if문 한개로 정확히 같은 동작을 할 수 있도록 사용가능
- 전에 배웠던 예제와 비교해봤을 때 코드가 간결해진 것을 확인할 수 있음

3. or
- 좌항과 우항 둘 중 하나 이상 참일때 전체가 참이되는 논리연산자
- ||로 표기(엔터위에 있는 키를 shift를 누르고 입력)

public class OrDemo {
 
    public static void main(String[] args) {
        if (true || true) {
            System.out.println(1);
        }
        if (true || false) {
            System.out.println(2);
        }
        if (false || true) {
            System.out.println(3);
        }
        if (false || false) {
            System.out.println(4);
        }
 
    }
- 위 코드를 실행했을 때 123이 출력됨. 4번째 if문만 좌항과 우항이 거짓이기 때문에 출력안됨
- or연산자를 활용할 수 있는 예제

public class LoginDemo4 {
    public static void main(String[] args) {
        String id = args[0];
        String password = args[1];
        if ((id.equals("egoing") || id.equals("k8805") || id.equals("sorialgi"))
                && password.equals("111111")) {
            System.out.println("right");
        } else {
            System.out.println("wrong");
        }
    }
}
- and연산자의 경우 한개의 계정만 사용이 가능했다면, or을 활용해서 여러개의 계정이 접속가능하게 만들 수 있음.

4. not
- !라고 표기
- 부정의 의미를 담고 있음. Boolean값을 역전시킨다. true에 !를 붙이면 false가 되고, false에 !를 붙이면 true가 된다.

public class NotDemo {
 
    public static void main(String[] args) {
        if (!true) {
            System.out.println(1);
        }
        if (!false) {
            System.out.println(2);
        }
 
    }
 
}
- 1번째 if문은 false, 2번쨰 if문은 true가되므로, 실행 시 2를 출력함.