1. 반복문
- 컴퓨터가 반복적인 작업을 하기위한 문법
- loop, iteration라고도 한다

2. while
- 조건이 참인 동안 반복적으로 동작
- 형식
while(조건→언제까지){ 
    반복 실행 영역 → 반복작업
}

public class WhileDemo {
 
    public static void main(String[] args) {
        while (true) {
            System.out.println("Coding Everybody");
        }
 
    }
- Coding Everybody가 계속해서 출력됨
- while안의 조건이 false라면 실행안됨
- 언제까지 실행된다라는 조건이 붙여져야 쓸만한 코드가 됨

int i = 0;
// i의 값이 10보다 작다면 true, 크다면 false가 된다. 현재 i의 값은 0이기 때문에 이 반복문은 실행된다. 
while(i<10){         
    System.out.println("Coding Everybody"+i);
    // i의 값에 1을 더한다. 반복문의 중괄호의 마지막 라인에 도달하면 반복문은 반복문을 재호출한다. 이때 i<10의 값을 검사하게 된다.
    i++;
}
- 먼저 i는 0이므로 쭉 실행되고 i++를 거쳤을때, i = i+1이 된다. 이후 while의 조건을 다시 확인하게 되면서 123...이 출력되는 것
- Coding Everybody1, Coding Everybody2 ... Coding Everybody9까지 출력됨

2. for
- while문에서는 while문 외부에 변수 i값을 초기화하고, while문 안에서 i값을 증가시키는데, 그것을 문법적으로 만든 것이 for문이다.
- for문은 특정한 횟수만큼 반복 실행을 하는 경우에 자주 사용된다
- 형식
for(초기화; 종료조건; 반복실행){
    반복적으로 실행될 구문
}

public class ForDemo {
 
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            System.out.println("Coding Everybody " + i);
        }
 
    }
- 초기값 검사, 조건검사 → true일 시 중괄호 안의 코드 실행, 반복실행 값 실행 순서로 진행됨
- while문 예제와 같이 Coding Everybody1, Coding Everybody2 ... Coding Everybody9까지 출력됨
- 같은 동작이지만, while문보다 훨씬 간략한 코드로 정리 가능

3. 반복문이 없다면
- coding everybody를 10번 반복해서 출력하고 싶다고 한다면 아래와 같이 코드를 작성하면 된다.

System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");
System.out.println("coding everybody");

- 만약 coding everybody를 천번 출력해야된다면? → 시간도 많이 걸리고 힘들다

int i = 0;
while(i<10){
    System.out.println("coding everybody");
    i++;
}
- 이렇게 하면 10번의 coding everybody를 출력 가능하다. 조건의 우항을 바꾸면 얼마든지 출력가능하다.

4. break
- 반복문을 중간에 중단시키고 싶을때 사용

public class BreakDemo {
 
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            if (i == 5)
                break;
            System.out.println("Coding Everybody " + i);
        }
    } 
}
- if문을 통해 i = 5가 되었을때 반복문이 종료가 되고, 그 다음 코드로 넘어가게 된다.
- if문 안의 실행코드가 한줄이면 중괄호는 없어도 됨.

5. continue
- 반복문에서 중간에 건너뛰고 싶을때 사용

public class BreakDemo {
 
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            if (i == 5)
                continue;
            System.out.println("Coding Everybody " + i);
        }
    }
}
- 결과 i = 5값일때 일단 멈추고, 건너뛰어서 i = 6값일때부터 다시 시작함

6. 반복문의 중첩
- 반복문 안에 다시 반복문을 쓸 수 있다.

public class LoopDepthDemo {
 
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                System.out.println(i + "" + j);
            }
        }
 
    }
 
}
- i가 변수인 for문이 먼저 실행, 중괄호 안의 코드가 반복실행
- j가 변수인 for문 실행, j가 9가 될때까지 계속실행, i는 j가 변수인 for문이 종료될때까지 계속 0
- j for문이 끝나면 다시 i for문으로 돌아가서 i++값을 받고, i는 1인 상태에서 j for문으로 진입
- j for문은 다시 1, 2, 3, ... , 9까지 값이 나옴, 그동안 i값은 계속 1
- 결국 00, 01, 02, 03, ... , 99까지 출력