1. LinkedList
- 데이터 스트럭처 중 하나
- 컴퓨터에서 프로그램을 실행할 때 이루어지는 동작
 → CPU에서 Storage에 실행할 프로그램을 물어봄
 → Storage에서 프로그램을 메모리에 갖다줌
 → CPU는 메모리에서 전달된 내용을 읽고, 연산 및 실행함
- 데이터 스트럭처의 대상은 메모리이며, 메모리를 효율적으로 사용하는 것이 중요하다

2. 메모리의 특징
- 메모리에는 내부에 각각의 주소가 있다.
- 각각의 주소에는 데이터가 저장되어 있고, 이에 접근하는 속도는 모든 주소들이 동일하다
 → 이를 RAM(Random Access Memory)라고 한다.

3. ArrayList와 LinkedList의 차이
- ArrayList는 저장된 데이터들이 쭉 연결되어 있다.
- LinkedList는 저장된 데이터들이 메모리에 흩어져 저장되어 있다. 그리고 어떠한 방식으로 데이터들이 연결되어 있다.

4. LinkedList의 구조
- LinkedList를 구성하는 데이터 하나하나를 node또는 vertex라고 한다.
 → index가 node이다.
- 객체지향 프로그래밍에서는 노드는 통상 객체를 담아 구성된다.
- LinkedList에는 두개의 field가 있다.
 → Data field : 데이터가 저장되는 변수
 → Link field : 다음 노드가 어디 있는지 저장하는 변수
- HEAD : 첫번째 노드가 어디 있는지를 담고 있는 변수(노드가 아님)

5. LinkedList 데이터 추가
- 예시구조
 15 → 6 → 23 → 4 →7 → 71
- 이때 HEAD에 85를 추가하게 되면 아래처럼 된다.
85 →15 → 6 → 23 → 4 →7 → 71
 →HEAD에 원래 15를 가리키도록 저장된 것이 85를 가리키도록 입력이되면 내부 동작으로 15 이하는 한칸씩 밀리게 되고 HEAD는 85를 가리키게 된다.
- 이 동작을 유사코드로 나타내면 아래와 같다.
ex) Vertex temp = new Vertex(input) → 85 생성	
 temp.next = head → head값을 next즉 집어넣을 값의 다음 값에 지정
 head = temp → 생성한 85를 head에 저장
※Vertex는 node
- node와 node는 next로 연결이 되어 있다(link field).

5-1. LinkedList 데이터를 중간에 추가
- 예시구조 : 6 다음에 90을 넣은 상황이다.
15 → 6 → 90 → 23 → 4 →7 → 71
- 이 동작을 유사 코드로 나타내면 아래와 같다.
Vertex temp1 = head → temp1에 head인 15를 넣는다
while(--k! = 0)
	temp1 = temp1.next 
→ insert시 k번째에 넣는 것으로 입력한다. 즉 2번 자리라는 뜻이다. 
→ --k이기 때문에 k의 값에서 1을 먼저 빼고 비교, 1 = 0이기 때문에 실행, 반복, k-1을 통해 0 = 0이기 때문에 실행 중단.
→ 최종적으로 temp1은 6인 채 while문은 종료된다.
Vertex temp2 = temp1.next → temp2에 temp1의 다음 값인 23을 입력
Vertex newVertex = new Vertex(input) → 넣고자 하는 값인 90 생성
temp1.next = newVertex → temp1의 다음 값으로 생성한 값인 90 입력 
newVertex.next = temp2 → 생성한 값인 90의 다음 값으로 temp2, 즉, 23을 입력
- 추가하고자 하는 값의 앞, 뒤 값을 temp1, temp2로 설정하여 동작하는 것이 포인트
- head를 temp1에 담아서 temp1을 넣고자 하는 위치까지 while문으로 옮기는 것이 두번째 포인트
- LinkedList에서 데이터를 중간에 추가할 때, 앞에 추가할 때 넣고자 하는 위치의 앞의 값과 뒤의 값만 알면 되기 때문에 ArrayList에 비해 상당히 간편하다.

6. LinkedList 데이터 삭제
- 예시구조
15 → 6 → 90 → 23 → 4 →7 → 71
- 90을 삭제하고자 하는 상황이다.
Vertex cur = head → 우선 head값을 찾아서 cur에 넣는다. 현재 cur엔 15가 할당 되어 있다.
while(--k!=0) → 삭제하고자 하는 인덱스 값인 k가 0이 될때까지 cur에 next값을 넣어준다. --k이므로 k = 1일때 cur = 6이고 다음 실행단계에서 k=0이기 때문에 종료된다.
	cur = cur.next
Vertex tobedeleted = cur.next → 삭제하고자 하는 값을 tobedeleted에 넣는다.
cur.next = cur.next.next →cur.next는 현재 90인데, cur.next.next의 값, 즉 23을 넣어준다. 이로서 tobedeleted값인 90이 분리된다.
delete tobedeleted → 삭제하고자 하는 값 90을 삭제한다.

7. LinkedList vs ArrayList
- 인덱스를 이용한 데이터 조회
- 예시구조
15 → 6 → 90 → 23 → 4 →7 → 71
- 위의 예시구조에서 4를 찾는 과정을 살펴보자
- head에서부터 next()를 통해 4를 찾다가 찾으면 그 값을 리턴하는 방식이다.