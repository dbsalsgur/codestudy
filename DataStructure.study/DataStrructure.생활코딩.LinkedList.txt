1. LinkedList
- 데이터 스트럭처 중 하나
- 컴퓨터에서 프로그램을 실행할 때 이루어지는 동작
 → CPU에서 Storage에 실행할 프로그램을 물어봄
 → Storage에서 프로그램을 메모리에 갖다줌
 → CPU는 메모리에서 전달된 내용을 읽고, 연산 및 실행함
- 데이터 스트럭처의 대상은 메모리이며, 메모리를 효율적으로 사용하는 것이 중요하다

2. 메모리의 특징
- 메모리에는 내부에 각각의 주소가 있다.
- 각각의 주소에는 데이터가 저장되어 있고, 이에 접근하는 속도는 모든 주소들이 동일하다
 → 이를 RAM(Random Access Memory)라고 한다.

3. ArrayList와 LinkedList의 차이
- ArrayList는 저장된 데이터들이 쭉 연결되어 있다.
- LinkedList는 저장된 데이터들이 메모리에 흩어져 저장되어 있다. 그리고 어떠한 방식으로 데이터들이 연결되어 있다.

4. LinkedList의 구조
- LinkedList를 구성하는 데이터 하나하나를 node또는 vertex라고 한다.
 → index가 node이다.
- 객체지향 프로그래밍에서는 노드는 통상 객체를 담아 구성된다.
- LinkedList에는 두개의 field가 있다.
 → Data field : 데이터가 저장되는 변수
 → Link field : 다음 노드가 어디 있는지 저장하는 변수
- HEAD : 첫번째 노드가 어디 있는지를 담고 있는 변수(노드가 아님)

5. LinkedList 데이터 추가
- 예시구조
 15 → 6 → 23 → 4 →7 → 71
- 이때 HEAD에 85를 추가하게 되면 아래처럼 된다.
85 →15 → 6 → 23 → 4 →7 → 71
 →HEAD에 원래 15를 가리키도록 저장된 것이 85를 가리키도록 입력이되면 내부 동작으로 15 이하는 한칸씩 밀리게 되고 HEAD는 85를 가리키게 된다.
- 이 동작을 유사코드로 나타내면 아래와 같다.
ex) Vertex temp = new Vertex(input) → 85 생성	
 temp.next = head → head값을 next즉 집어넣을 값의 다음 값에 지정
 head = temp → 생성한 85를 head에 저장
※Vertex는 node
- node와 node는 next로 연결이 되어 있다(link field).
