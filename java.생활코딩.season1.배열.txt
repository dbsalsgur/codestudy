1. 배열
- 배열(array)은 연관된 정보를 그룹핑하는데 사용한다.
- 배열은 연관된 데이터를 모아서 관리하기 위해서 사용하는 데이터 타입이다.
- 변수가 하나의 데이터를 저장하기 위한 것이라면, 배열은 여러개의 데이터를 저장하기 위한 것이라고 할 수 있다.
- 비유
2학년 1반 → 변수 = {최진혁, 최유빈, ... , 이고잉 → 상수}
→ 연관된 데이터를 그룹핑해서 더 효율적으로 사용할 수 있게 하는것

2. 배열의 생성
- 

public class DefineDemo {
 
    public static void main(String[] args) {
 
        String[] classGroup = { "최진혁", "최유빈", "한이람", "이고잉" };
 
    }
 
}
- Stiring → 문자열 데이터타입이다
- [] → 배열이다
- classGroup (변수)

3. 배열의 동작

public class GetDemo {
 
    public static void main(String[] args) {
        String[] classGroup = { "최진혁", "최유빈", "한이람", "이고잉" };
        System.out.println(classGroup[0]);
        System.out.println(classGroup[1]);
        System.out.println(classGroup[2]);
        System.out.println(classGroup[3]);
 
    }
 
}
- 결과 아래와 같이 출력된다.
최진혁
최유빈
한이람
이고잉
- 변수옆의 []안에 0부터시작하는 숫자를 넣으면 순차적으로 값을 가져올 수 있다.
- 0, 1, 2, 3, ...를 index 또는 색인이라고 한다.
- 그룹 안의 값들을 element 또는 원소라고 한다.

- 배열을 정의하는 다른 방법
public class LengthDemo {
 
    public static void main(String[] args) {
        String[] classGroup = new→ 새로운 String→ 문자열 데이터타입의 [4]→ 배열인데 원소가 4개이다; 
        classGroup[0] = "최진혁"; → 0은 최진혁이다.
        System.out.println(classGroup.length);
        classGroup[1] = "최유빈"; → 1은 최유빈이다.
        System.out.println(classGroup.length);
        classGroup[2] = "한이람"; → 2는  ...
        System.out.println(classGroup.length);
        classGroup[3] = "이고잉"; → 3은 ...
        System.out.println(classGroup.length);
- 실제로 classGroup[0] = "최진혁";과 같은 코드가 "실행될때마다" classGroup안에 데이터가 저장됨
- 첫번째 코드 실행되면 classGroup안에 한개, 두번째 코드 실행되면 두개, ...
- .length는 배열에 담길 수 있는 데이터의 개수를 알 수 있는 코드(그룹안에 몇개의 값이 있느냐 X)

4. 배열의 사용
- 예제, 배열과 반복문의 연계
1반 학생들을 번호순으로 정렬해서 줄을 세운다.
상담받은 학생의 숫자를 기록한다.
대기중인 학생과 상담을 한다.
상담받은 학생의 수를 1 증가시킨다.
총원보다 상담받은 학생의 수가 작다면 3번 절차로 돌아간다.
총원과 상담받은 학생의 수가 같다면 상담을 종료하고 업무를 계속한다.

public class ArrayLoopDemo {
 
    public static void main(String[] args) {
 
        String[] members = { "최진혁", "최유빈", "한이람" };
        for (int i = 0; i < members.length; i++) {
            String member = members[i];
            System.out.println(member + "이 상담을 받았습니다");
        }
 
    }
 
}
- members라는 변수에 데이터 담음
- for문 실행, 반복조건에 변수.length로 데이터한도 지정, 한도만큼 반복 후 종료할 수 있게 설정
- String member = members[i]로 재차 변수지정
- 결과 아래와 같이 출력
최진혁이 상담을 받았습니다
최유빈이 상담을 받았습니다
한이람이 상담을 받았습니다

5. for-each
- 배열과 for문을 같이 사용할 떄, 문장을 더 간편히 사용할 수 있다.
- 위의 예제와 동일한 동작을 하는 예제

public class ForeachDemo {
 
    public static void main(String[] args) {
        String[] members = { "최진혁", "최유빈", "한이람" };
        for (String e : members) {
            System.out.println(e + "이 상담을 받았습니다");
        }
    }
 
}
- e라는 문자열데이터의 변수 안에 members의 데이터를 하나씩 반복해서 담을 수 있다.
- : (콜론)을 넣어서 사용

6. 오류

String[] members = { "최진혁", "최유빈", "한이람" };
System.out.println(members[3]);   

Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 3
    at ot_array.ExceptionDemo.main(ExceptionDemo.java:7)
- 배열의 경계 밖의 값을 가져오려고 해서 발생한 오류
- 예외가 있지만, 지금단계에서는 오류라고 말함

String[] members = new String[3];
members[0] = "최진혁";
members[1] = "최유빈";
members[2] = "한이람";
members[3] = "이고잉";
- 배열의 한도를 지정했는데, 한도를 넘어서 데이터를 담으려고 했을 때 발생한 오류